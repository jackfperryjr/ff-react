{"version":3,"sources":["icon-spinner.gif","icon-moogle.png","Home.js","Games.js","Characters.js","Monsters.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","character","isLoading","_this2","setState","fetch","then","response","json","render","react_default","a","createElement","className","src","spinner","alt","picture","name","age","race","gender","job","href","target","Component","Games","games","style","margin","map","g","title","platform","releaseDate","Characters","characters","c","Monsters","monsters","class","m","moogle","strength","weakness","App","nav","$","on","collapse","react_router_dom","basename","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","closeNavDropdown","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fea4cea0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-spinner.822699a4.gif\";","module.exports = __webpack_public_path__ + \"static/media/icon-moogle.b747abc0.png\";","import React, { Component } from 'react'\nimport './App.css'\nimport spinner from './icon-spinner.gif'\n\nclass Home extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      character: {},\n      isLoading: false\n    }\n  }\n  componentDidMount () {\n    this.setState({ isLoading: true })\n\n    fetch('https://www.moogleapi.com/api/v1/characters/random')\n      .then(response => response.json())\n      .then(character => {\n        this.setState({ character: character, isLoading: false })\n      }\n      )\n  }\n  render () {\n    const isLoading = this.state.isLoading\n    let render\n\n    if (isLoading) {\n      render = <div className='random' isLoading={isLoading}>\n        <img className='img' src={spinner} alt='Random character' />\n      </div>\n    } else {\n      render = <div className='random'>\n        <img className='img' src={this.state.character.picture} alt='Random character' />\n        <div className='row'>\n          <div className='offset-md-3 col-md-6'>\n            <table className='centered'>\n              <tbody>\n                <tr>\n                  <td className='text-left font-weight-bold'>Name: </td>\n                  <td className='text-right'>{this.state.character.name}</td>\n                </tr>\n                <tr>\n                  <td className='text-left font-weight-bold'>Age: </td>\n                  <td className='text-right'>{this.state.character.age}</td>\n                </tr>\n                <tr>\n                  <td className='text-left font-weight-bold'>Race: </td>\n                  <td className='text-right'>{this.state.character.race}</td>\n                </tr>\n                <tr>\n                  <td className='text-left font-weight-bold'>Gender: </td>\n                  <td className='text-right'>{this.state.character.gender}</td>\n                </tr>\n                <tr>\n                  <td className='text-left font-weight-bold'>Job: </td>\n                  <td className='text-right'>{this.state.character.job}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n      </div>\n    }\n\n    return (\n      <div className='container text-center buffered'>\n        <span className='font-weight-bolder display-4'>Welcome!</span>\n        <hr className='random' />\n        <br />\n        <p>This is my simple little React.js web application.</p>\n        <p>Shameless plug: I'm reaching out to <a href='https://www.moogleapi.com' target='blank'>MoogleApi</a> to pull in data from three different endpoints.</p>\n        <br />\n        <div className='container random'>\n          <p>Here's a fourth endpoint fetching a random character each time this page loads.</p>\n          <br />\n          <br />\n          {render}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Home\n","import React, { Component } from 'react'\nimport './App.css'\nimport spinner from './icon-spinner.gif'\n\nclass Games extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      games: [],\n      isLoading: false\n    }\n  }\n  componentDidMount () {\n    this.setState({ isLoading: true })\n\n    fetch('https://www.moogleapi.com/api/v1/games')\n      .then(response => response.json())\n      .then(games => {\n        this.setState({ games: games, isLoading: false })\n      }\n      )\n  }\n  render () {\n    const isLoading = this.state.isLoading\n    let render\n    let divSpacing = {\n      margin: '10% auto 0 auto'\n    }\n\n    if (isLoading) {\n      render = <div className='random' style={divSpacing} isLoading={isLoading}>\n        <img className='img' src={spinner} alt='Random character' />\n      </div>\n    } else {\n      render = <div className='container contained'>\n        <table className='table table-condensed table-striped'>\n          <tr className='font-weight-bolder bg-dark text-white'>\n            <td>Title</td>\n            <td>Platform</td>\n            <td>Release Date</td>\n          </tr>\n          <tbody>\n            {this.state.games.map(g =>\n              <tr>\n                <td><img className='img-game' src={g.picture} alt={g.title} /></td><td>{g.platform}</td><td>{g.releaseDate}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    }\n    return (\n      <div className='container text-center buffered'>\n        <span className='font-weight-bolder display-4'>Games</span>\n        {render}\n      </div>\n    )\n  }\n}\n\nexport default Games\n","import React, { Component } from 'react'\nimport './App.css'\nimport spinner from './icon-spinner.gif'\n\nclass Characters extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      characters: [],\n      isLoading: false\n    }\n  }\n  componentDidMount () {\n    this.setState({ isLoading: true })\n\n    fetch('https://www.moogleapi.com/api/v1/characters')\n      .then(response => response.json())\n      .then(characters => {\n        this.setState({ characters: characters, isLoading: false })\n      }\n      )\n  }\n  render () {\n    const isLoading = this.state.isLoading\n    let render\n    let divSpacing = {\n      margin: '10% auto 0 auto'\n    }\n\n    if (isLoading) {\n      render = <div className='random' style={divSpacing} isLoading={isLoading}>\n        <img className='img' src={spinner} alt='Random character' />\n      </div>\n    } else {\n      render = <div className='container contained'>\n        <table className='table table-striped desktop'>\n          <tr className='font-weight-bolder bg-dark text-white'>\n            <td>Name</td>\n            <td>Age</td>\n            <td>Race</td>\n            <td>Gender</td>\n            <td>Job/Class</td>\n          </tr>\n          <tbody>\n            {this.state.characters.map(c =>\n              <tr>\n                <td><img className='img-character' src={c.picture} alt={c.name} /> {c.name}</td><td>{c.age}</td><td>{c.race}</td><td>{c.gender}</td><td>{c.job}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n        <table className='table table-striped mobile'>\n          <tr className='font-weight-bolder bg-dark text-white'>\n            <td>Name</td>\n            <td>Job/Class</td>\n          </tr>\n          <tbody>\n            {this.state.characters.map(c =>\n              <tr>\n                <td><img className='img-character' src={c.picture} alt={c.name} /> {c.name}</td><td>{c.job}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    }\n\n    return (\n      <div className='container text-center buffered'>\n        <span className='font-weight-bolder display-4'>Characters</span>\n        {render}\n      </div>\n    )\n  }\n}\n\nexport default Characters\n","import React, { Component } from 'react'\nimport './App.css'\nimport spinner from './icon-spinner.gif'\nimport moogle from './icon-moogle.png'\n\nclass Monsters extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      monsters: [],\n      isLoading: false\n    }\n  }\n  componentDidMount () {\n    this.setState({ isLoading: true })\n\n    fetch('https://www.moogleapi.com/api/v1/monsters')\n      .then(response => response.json())\n      .then(monsters => {\n        this.setState({ monsters: monsters, isLoading: false })\n      }\n      )\n  }\n  render () {\n    const isLoading = this.state.isLoading\n    let render\n    let divSpacing = {\n      margin: '10% auto 0 auto'\n    }\n\n    if (isLoading) {\n      render = <div className='random' style={divSpacing} isLoading={isLoading}>\n        <img className='img' src={spinner} alt='Random character' />\n      </div>\n    } else {\n      render = <div class='container contained'>\n        <table className='table table-condensed table-striped'>\n          <tr className='font-weight-bolder bg-dark text-white'>\n            <td>Name</td>\n            <td>Strength</td>\n            <td>Weakness</td>\n          </tr>\n          <tbody>\n            {this.state.monsters.map(m =>\n              <tr>\n                <td><img className='img-monster' src={moogle} alt={m.name} />{m.name}</td><td>{m.strength}</td><td>{m.weakness}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    }\n    return (\n      <div className='container text-center buffered'>\n        <span className='font-weight-bolder display-4'>Monsters</span>\n        {render}\n      </div>\n    )\n  }\n}\n\nexport default Monsters\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport Home from './Home'\nimport Games from './Games'\nimport Characters from './Characters'\nimport Monsters from './Monsters'\nimport moogle from './icon-moogle.png'\nimport './App.css'\nimport $ from 'jquery'\n\nclass App extends Component {\n  closeNavDropdown () {\n    var nav = $('.navbar-collapse')\n    nav.on('click', 'a:not([data-toggle])', null, function () { // Making my silly Bootstrap .navbar collapse on click\n      nav.collapse('hide')\n    })\n  }\n  render () {\n    return (\n      <Router basename='/final-fantasy-react'>\n        <nav className='navbar navbar-expand-lg navbar-light bg-light'>\n          <Link to='/'><img src={moogle} className='App-logo' alt='Moogle' /></Link>\n          <button className='navbar-toggler' type='button' data-toggle='collapse' data-target='#navbar' aria-controls='navbar' aria-expanded='false' aria-label='Toggle navigation'>\n            <span className='navbar-toggler-icon' />\n          </button>\n          <div id='navbar' className='navbar-collapse collapse' aria-expanded='true' onClick={this.closeNavDropdown}>\n            <ul className='nav navbar-nav'>\n              <li><Link to='/games' className='nav-item nav-link'>Games</Link></li>\n              <li><Link to='/characters' className='nav-item nav-link'>Characters</Link></li>\n              <li><Link to='/monsters' className='nav-item nav-link'>Monsters</Link></li>\n            </ul>\n          </div>\n        </nav>\n        <Route exact path='/' component={Home} />\n        <Route path='/games' component={Games} />\n        <Route path='/characters' component={Characters} />\n        <Route path='/monsters' component={Monsters} />\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap/dist/js/bootstrap.js'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}